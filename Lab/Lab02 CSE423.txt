



from OpenGL.GL import *
from OpenGL.GLUT import *

from OpenGL.GLU import *

student_id = "20301230"

def draw_points(x, y):
    glPointSize(6) #pixel size. by default 1 thake
    glBegin(GL_POINTS)
    glColor3f(1.0, 1.0, 0.0)
    glVertex2f(x,y) #jekhane show korbe pixel
    glEnd()


def second_last_digit(val1):
    if val1 == 0:
        midpoint_line_algo(50, 400, 225, 400)
        midpoint_line_algo(50, 400, 50, 100)
        midpoint_line_algo(50, 100, 225, 100)
        midpoint_line_algo(225, 100, 225, 400)
    elif val1 == 1:
        midpoint_line_algo(225, 100, 225, 400)
    elif val1 == 2:
        midpoint_line_algo(50, 400, 225, 400)
        midpoint_line_algo(50, 100, 50, 250)
        midpoint_line_algo(50, 100, 225, 100)
        midpoint_line_algo(225, 400, 225, 250)
        midpoint_line_algo(50, 250, 225, 250)
    elif val1 == 3:
        midpoint_line_algo(50, 400, 225, 400)
        midpoint_line_algo(50, 100, 225, 100)
        midpoint_line_algo(225, 100, 225, 400)
        midpoint_line_algo(50, 250, 225, 250)
    elif val1 == 4:
        midpoint_line_algo(50, 400, 50, 250)
        midpoint_line_algo(225, 100, 225, 400)
        midpoint_line_algo(50, 250, 225, 250)
    elif val1 == 5:
        midpoint_line_algo(50, 400, 225, 400)
        midpoint_line_algo(50, 400, 50, 250)
        midpoint_line_algo(50, 100, 225, 100)
        midpoint_line_algo(225, 100, 225, 250)
        midpoint_line_algo(50, 250, 225, 250)
    elif val1 == 6:
        midpoint_line_algo(50, 400, 225, 400)
        midpoint_line_algo(50, 400, 50, 100)
        midpoint_line_algo(50, 100, 225, 100)
        midpoint_line_algo(225, 100, 225, 250)
        midpoint_line_algo(50, 250, 225, 250)

    elif val1 == 7:
        midpoint_line_algo(225, 100, 225, 400)
        midpoint_line_algo(50, 400, 225, 400)
    elif val1 == 8:
        midpoint_line_algo(50, 400, 225, 400)
        midpoint_line_algo(50, 400, 50, 100)
        midpoint_line_algo(50, 100, 225, 100)
        midpoint_line_algo(225, 100, 225, 400)
        midpoint_line_algo(50, 250, 225, 250)
    elif val1 == 9:
        midpoint_line_algo(50, 400, 225, 400)
        midpoint_line_algo(50, 400, 50, 250)
        midpoint_line_algo(50, 100, 225, 100)
        midpoint_line_algo(225, 100, 225, 400)
        midpoint_line_algo(50, 250, 225, 250)
#Each of the lines  define the x and y coordinates of the starting and ending points of each line.

def last_digit(val2):
    if val2 == 0:
        midpoint_line_algo(275, 400, 450, 400)
        midpoint_line_algo(275, 400, 275, 100)
        midpoint_line_algo(275, 100, 450, 100)
        midpoint_line_algo(450, 100, 450, 400)
    elif val2 == 1:
        midpoint_line_algo(450, 100, 450, 400)
    elif val2 == 2:
        midpoint_line_algo(275, 400, 450, 400)
        midpoint_line_algo(275, 100, 450, 100)
        midpoint_line_algo(275, 100, 275, 250)
        midpoint_line_algo(275, 250, 450, 250)
        midpoint_line_algo(450, 400, 450, 250)
    elif val2 == 3:
        midpoint_line_algo(275, 400, 450, 400)
        midpoint_line_algo(275, 100, 450, 100)
        midpoint_line_algo(450, 100, 450, 400)
        midpoint_line_algo(275, 250, 450, 250)
    elif val2 == 4:
        midpoint_line_algo(450, 100, 450, 400)
        midpoint_line_algo(275, 400, 275, 250)
        midpoint_line_algo(275, 250, 450, 250)
    elif val2 == 5:
        midpoint_line_algo(275, 400, 450, 400)
        midpoint_line_algo(275, 100, 450, 100)
        midpoint_line_algo(450, 100, 450, 250)
        midpoint_line_algo(275, 400, 275, 250)
        midpoint_line_algo(275, 250, 450, 250)
    elif val2 == 6:
        midpoint_line_algo(275, 400, 450, 400)
        midpoint_line_algo(275, 400, 275, 100)
        midpoint_line_algo(275, 100, 450, 100)
        midpoint_line_algo(450, 100, 450, 250)
        midpoint_line_algo(275, 250, 450, 250)

    elif val2 == 7:
        midpoint_line_algo(450, 100, 450, 400)
        midpoint_line_algo(275, 400, 450, 400)
    elif val2 == 8:
        midpoint_line_algo(275, 400, 450, 400)
        midpoint_line_algo(275, 400, 275, 100)
        midpoint_line_algo(275, 100, 450, 100)
        midpoint_line_algo(450, 100, 450, 400)
        midpoint_line_algo(275, 250, 450, 250)
    elif val2 == 9:
        midpoint_line_algo(275, 400, 450, 400)
        midpoint_line_algo(275, 100, 450, 100)
        midpoint_line_algo(450, 100, 450, 400)
        midpoint_line_algo(275, 400, 275, 250)
        midpoint_line_algo(275, 250, 450, 250)

def ToZero(x,y, zone):  #Converts to Zone 0
    if(zone==0):
        return x,y
    elif(zone==1):
        return y,x
    elif (zone==2):
        return y,-x
    elif(zone==3):
        return -x,y
    elif(zone==4):
        return -x,-y
    elif (zone==5):
        return -y,-x
    elif (zone==6):
        return -y,x
    elif zone==7:
        return x,-y

def ToOriginalZone(x,y,zone):  # Converts from Zero Zone to Previous Zone
    if(zone==0):
        return x,y
    elif(zone==1):
        return y,x
    elif (zone==2):
        return -y, x
    elif(zone==3):
        return -x,y
    elif(zone==4):
        return -x,-y
    elif(zone==5):
        return -y,-x
    elif(zone==6):
        return y,-x
    elif(zone==7):
        return x,-y

def FindZone(x1,y1,x2,y2):
    dx=x2-x1
    dy=y2-y1
    x,y =x1, y1
    if abs(dy)>abs(dx):            # 1,2,5,6
        if dy>=0 and dx>=0:
            zone=1
        elif dx<=0 and dy>=0:
            zone=2
        elif dx<=0 and dy<=0:
            zone =5
        elif dx>=0 and dy<=0:
            zone=6
    else:                          # 3,4, 0 ,7
        if dy>=0 and dx>=0:
            zone=0
        elif dx<=0 and dy>=0:
            zone=3
        elif dx<=0 and dy<=0:
            zone =4
        elif dx>=0 and dy<=0:
            zone=7

    return zone


def midpoint_line_algo(x1,y1,x2,y2):
    zone=FindZone(x1,y1,x2,y2)
    x1,y1=ToZero(x1,y1, zone)
    x2,y2=ToZero(x2,y2, zone)
    dx=x2-x1
    dy=y2-y1
    d= 2*dy -dx
    E=2*dy
    NE=2*(dy-dx)
    x,y=x1,y1

    while x<=x2:
        _x,_y=ToOriginalZone(x,y,zone)
        draw_points(_x,_y)
        if d<0:
            d+=E
        else:
            y+=1
            d+=NE
        x+=1


def iterate():
    glViewport(0, 0, 500, 500)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0.0, 500, 0.0, 500, 0.0, 1.0)
    glMatrixMode (GL_MODELVIEW)
    glLoadIdentity()

def showScreen():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    iterate()
    glColor3f(0.0, 1.0, 0.0) #konokichur color set (RGB)

    second_last_digit(int(student_id[-2]))    # ID ER 2ND TO LAST ITEM PRINT KRTA
    last_digit(int(student_id[-1]))

    glutSwapBuffers()


glutInit()
glutInitDisplayMode(GLUT_RGBA)
glutInitWindowSize(500, 500) #window size
glutInitWindowPosition(0, 0)
wind = glutCreateWindow(b"OpenGL Coding Practice") #window name
glutDisplayFunc(showScreen)
glutMainLoop()

